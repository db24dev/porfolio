"use strict";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 developer.glb -T
Files: developer.glb [981.62KB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/developer-transformed.glb [395.08KB] (60%)
*/
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var fiber_1 = require("@react-three/fiber");
var drei_1 = require("@react-three/drei");
var three_stdlib_1 = require("three-stdlib");
var Developer = function (_a) {
    var _b = _a.animationName, animationName = _b === void 0 ? 'idle' : _b, props = __rest(_a, ["animationName"]);
    var group = (0, react_1.useRef)(null);
    var scene = (0, drei_1.useGLTF)('/models/animations/developer.glb').scene;
    var clone = react_1.default.useMemo(function () { return three_stdlib_1.SkeletonUtils.clone(scene); }, [scene]);
    var _c = (0, fiber_1.useGraph)(clone), nodes = _c.nodes, materials = _c.materials;
    var idleAnimation = (0, drei_1.useFBX)('/models/animations/idle.fbx').animations;
    var saluteAnimation = (0, drei_1.useFBX)('/models/animations/salute.fbx').animations;
    var clappingAnimation = (0, drei_1.useFBX)('/models/animations/clapping.fbx').animations;
    var victoryAnimation = (0, drei_1.useFBX)('/models/animations/victory.fbx').animations;
    idleAnimation[0].name = 'idle';
    saluteAnimation[0].name = 'salute';
    clappingAnimation[0].name = 'clapping';
    victoryAnimation[0].name = 'victory';
    var actions = (0, drei_1.useAnimations)([idleAnimation[0], saluteAnimation[0], clappingAnimation[0], victoryAnimation[0]], group).actions;
    (0, react_1.useEffect)(function () {
        if (actions === null || actions === void 0 ? void 0 : actions[animationName]) {
            actions[animationName].reset().fadeIn(0.5).play();
        }
        return function () { if (actions === null || actions === void 0 ? void 0 : actions[animationName])
            actions[animationName].fadeOut(0.5); };
    }, [animationName]);
    return (<group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips}/>
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton}/>
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton}/>
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton}/>
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}/>
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}/>
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton}/>
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}/>
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}/>
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}/>
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}/>
    </group>);
};
drei_1.useGLTF.preload('/models/animations/developer.glb');
exports.default = Developer;
