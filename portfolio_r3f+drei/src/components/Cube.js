"use strict";
/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var gsap_1 = require("gsap");
var react_1 = require("@gsap/react");
var react_2 = require("react");
var drei_1 = require("@react-three/drei");
var Cube = function (_a) {
    var props = __rest(_a, []);
    var nodes = (0, drei_1.useGLTF)('models/cube.glb').nodes;
    var texture = (0, drei_1.useTexture)('textures/cube.png');
    var cubeRef = (0, react_2.useRef)(null);
    var _b = (0, react_2.useState)(false), hovered = _b[0], setHovered = _b[1];
    (0, react_1.useGSAP)(function () {
        gsap_1.default
            .timeline({
            repeat: -1,
            repeatDelay: 0.5,
        })
            .to(cubeRef.current.rotation, {
            y: hovered ? '+=2' : "+=".concat(Math.PI * 2),
            x: hovered ? '+=2' : "-=".concat(Math.PI * 2),
            duration: 2.5,
            stagger: {
                each: 0.15,
            },
        });
    });
    return (<drei_1.Float floatIntensity={2}>
      <group position={[9, -4, 0]} rotation={[2.6, 0.8, -1.8]} scale={0.74} dispose={null} {...props}>
        <mesh ref={cubeRef} castShadow receiveShadow geometry={nodes.Cube.geometry} material={nodes.Cube.material} onPointerEnter={function () { return setHovered(true); }}>
          <meshMatcapMaterial matcap={texture} toneMapped={false}/>
        </mesh>
      </group>
    </drei_1.Float>);
};
drei_1.useGLTF.preload('models/cube.glb');
exports.default = Cube;
